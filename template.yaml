AWSTemplateFormatVersion: 2010-09-09
Description: >-
  Serverless patterns - Amazon API Gateway to AWS Lambda to Amazon DynamoDB
  (uksb-1tthgi812) (tag:apigw-lambda-dynamodb)
Outputs:
  EndpointUrl:
    Description: HTTP REST endpoint URL
    Value: !Sub 'https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod'
Resources:
  ServerlessRestApiProdStage:
    Type: 'AWS::ApiGateway::Stage'
    Properties:
      DeploymentId: !Ref ServerlessRestApiDeploymentfe879baf9c
      RestApiId: !Ref ServerlessRestApi
      StageName: Prod
  LambdaFunctionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      Policies:
        - PolicyName: LambdaFunctionRolePolicy0
          PolicyDocument:
            Statement:
              - Action:
                  - 'dynamodb:GetItem'
                  - 'dynamodb:DeleteItem'
                  - 'dynamodb:PutItem'
                  - 'dynamodb:Scan'
                  - 'dynamodb:Query'
                  - 'dynamodb:UpdateItem'
                  - 'dynamodb:BatchWriteItem'
                  - 'dynamodb:BatchGetItem'
                  - 'dynamodb:DescribeTable'
                  - 'dynamodb:ConditionCheckItem'
                Effect: Allow
                Resource:
                  - !Sub 
                    - >-
                      arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${tableName}
                    - tableName: !Ref DynamoDBTable
                  - !Sub 
                    - >-
                      arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${tableName}/index/*
                    - tableName: !Ref DynamoDBTable
      Tags:
        - Key: 'lambda:createdBy'
          Value: SAM
  DynamoDBTable:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      TableName: WeatherData
      BillingMode: PAY_PER_REQUEST
  LambdaFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        S3Bucket: cf-templates-1408v8pnvdywj-ap-south-1
        S3Key: cygnum/lambda_function.zip
      FunctionName: WeatherFunction
      Handler: index.lambda_handler
      Role: !GetAtt 
        - LambdaFunctionRole
        - Arn
      Runtime: python3.12
      Tags:
        - Key: 'lambda:createdBy'
          Value: SAM
      Environment:
        Variables:
          TABLE_NAME: !Ref DynamoDBTable
  ServerlessRestApiDeploymentfe879baf9c:
    Type: 'AWS::ApiGateway::Deployment'
    Properties:
      Description: 'RestApi deployment id: fe879baf9c5c20d10b673bc08fd12b15b8822d44'
      RestApiId: !Ref ServerlessRestApi
      StageName: Stage
  ServerlessRestApi:
    Type: 'AWS::ApiGateway::RestApi'
    Properties:
      Body:
        info:
          version: '1.0'
          title: !Ref 'AWS::StackName'
        paths:
          /:
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub >-
                  arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaFunction.Arn}/invocations
              responses: {}
        swagger: '2.0'
  LambdaFunctionApiEventPermissionProd:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref LambdaFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 
        - >-
          arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/POST/
        - __ApiId__: !Ref ServerlessRestApi
          __Stage__: '*'
          